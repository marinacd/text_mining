corpus <- tm_map(corpus, content_transformer(str_squish))
inspect(corpus[[2]])
#stemming
corp_stemmed <- tm_map(corpus, stemDocument)
original_tidy_corp <- tidy(corpus)
original_tidy_corp$PMC <- NLP::meta(corpus)$PMC
original_tidy_corp$SentID <- NLP::meta(corpus)$SentID
original_tidy_corp <- original_tidy_corp %>%
select(id, text, PMC, SentID)
#we will use quanteda to tokenize to avoid stripping punctuation
library(quanteda)
original_tidy_corp <- original_tidy_corp %>%
mutate(text= str_replace_all(text, "-", "_"))
#Splitting in tokens (using quanteda)
original_tidy_corp <- corpus(original_tidy_corp, docid_field = "id", text_field = "text", meta = NLP::meta(corpus),unique_docnames = TRUE)
tokens <- tokens(original_tidy_corp, split_hyphens = FALSE, include_docvars = TRUE)
names(tokens) <- names(corpus)
qterms_df <- dfm(tokens)
qterms_df <- tidy(qterms_df)
qterms_df[c("PMC", "SentID")] <- str_split_fixed(qterms_df$document, "_", n = 2)
##################Check for everything################
wt <- qterms_df
##################Filter non-alpha chars#############
wt <- wt %>%
filter(str_detect(term, "[A-Za-z, ]+"))
###############LAYER 1: EXACT MATCH WITH NAME#################
library(stringdist)
ref_name <- dict_met %>%
rename(term = name)
match_lay_1 <- semi_join(wt, ref_name, by = "term")
no_match_lay_1 <- anti_join(wt, ref_name, by = "term")
#check
nrow(match_lay_1) + nrow(no_match_lay_1) == nrow(wt)
ref_syn <- dict_met %>%
rename(term = Synonyms)
match_lay_2a <- merge(no_match_lay_1, ref_syn, by = "term")
no_match_lay_2a <- anti_join(no_match_lay_1, ref_syn, by = "term")
#check
nrow(match_lay_2a) + nrow(no_match_lay_2a) == nrow(no_match_lay_1)  #CHECK WHY THIS IS GIVING FALSE???
#############LAYER 2a: EXACT MATCH WITH ALIAS ################
ref_alias <- dict_met %>%
rename(term = alias)
match_lay_2b <- merge(no_match_lay_2a, ref_alias, by = "term")
no_match_lay_2b <- anti_join(no_match_lay_2a, ref_alias, by = "term")
#check
nrow(match_lay_2b) + nrow(no_match_lay_2b) == nrow(no_match_lay_2a)
#############LAYER 3a: FUZZY MATCH WITH NAME################
library(RecordLinkage)
#choose similarity
sim = 0.8
View(no_match_lay_2b)
gc()
rm(exp)
gc()
rm(hmdb_dict)
rm(hdmb_dict)
rm(fobi_mets)
rm(dat)
rm(corp_stemmed)
gc()
match_lay_1
match_lay_1 <- match_lay_1 %>%
str_locate(content(corpus), term )
ai <- match_lay_1$document
si
ai
ai[1:50,]
ai[1:50]
corpus
meta(corpus)
NLP::meta(corpus)
which(NLP::meta(corpus)$PMC %in% match_lay_1$PMC)
original_tidy_corp
meta(original_tidy_corp)
?mta
?meta
names(corpus)
meta(corpus$doc) <- names(corpus)
NLP::meta(corpus$doc) <- names(corpus)
docs <- names(corpus)
NLP::meta(corpus) <- docs
meta(corpus)
NLP::meta(corpus)
View(corpus)
View(dict_met)
meta(corpus)$id
NLP::meta(corpus)$id
meta(original_tidy_corp)
View(corpus)
meta(original_tidy_corp) <- names(docs)
meta(original_tidy_corp) <- docs
docs
names(docs) <- docs
meta(original_tidy_corp) <- docs
docs
meta(original_tidy_corp) <- docs
meta(original_tidy_corp) <- docs
match_lay_1
match_lay_1$document[1])
original_tidy_corp[1]
original_tidy_corp[[1]]
tm_map(corpus, str_locate_all("creatine"))
tm_map(corpus, str_locate_all(pattern = "creatine"))
str_locate_all(content(corpus), pattern = "creatine")
?str_locate_all
str_locate_all_regex(content(corpus), pattern = "creatine", omit_no_match = TRUE)
stri_locate_all_regex(content(corpus), pattern = "creatine", omit_no_match = TRUE)
stri_locate_all_regex(content(corpus), match_lay_1$term, omit_no_match = TRUE)
content(corpus)
original_tidy_corp
class(original_tidy_corp)
stri_locate_all_regex(original_tidy_corp, match_lay_1$term, omit_no_match = TRUE)
stri_locate_all_regex(original_tidy_corp[1], match_lay_1$term, omit_no_match = TRUE)
stri_locate_all_regex(original_tidy_corp[[1]], match_lay_1$term, omit_no_match = TRUE)
original_tidy_corp[[1]]
str_locate(original_tidy_corp[[1]], "creatinine")
str_locate(original_tidy_corp[[1]], "creatinine")$start
m <- str_locate(original_tidy_corp[[1]], "creatinine")
m
m[1]
class(m)
list(m[1], m[2])
df <- tibble(start = m[1], end = m[2])
df
rbind(df, c(m[1], m[2]))
match_lay_1
class(original_tidy_corp)
?corpus
docnames(original_tidy_corp)
lenght(which(docnames(original_tidy_corp) %in% match_lay_1$document))
length(which(docnames(original_tidy_corp) %in% match_lay_1$document))
match_lay_1
nrow(match_lay_1)
unique(match_lay_1$document)
length(unique(match_lay_1$document))
nrow(match_lay_1)
length(which(docnames(original_tidy_corp) %in% match_lay_1$document))
original_tidy_corp[[which(docnames(original_tidy_corp) %in% match_lay_1$document))]]
original_tidy_corp[[which(docnames(original_tidy_corp) %in% match_lay_1$document)]]
original_tidy_corp[which(docnames(original_tidy_corp) %in% match_lay_1$document)]
index(tokens,pattern = "creatinine"
)
original_tidy_corp
index(tokens,pattern = "creatinine")
#Splitting in tokens (using quanteda)
original_tidy_corp <- corpus(original_tidy_corp, docid_field = "id", text_field = "text", meta = NLP::meta(corpus),unique_docnames = TRUE)
original_tidy_corp
?index
index(tokens,pattern = met_vec)
tokens
?kwic
corpus
?quanteda::corpus
#################################NER with quanteda
###########Create corpus
file = "/Users/pauca/OneDrive/Escritorio/Marina TFG/TMpipeline/MetaboliteNER-main/Corpus/GoldStandard.txt"
#Corpus
corpus <- read.delim(file, header = FALSE, sep = "\t", dec = ".") %>%
rename(PMC = V1, SentID = V2, text = V3) %>%
mutate(doc_id = paste(PMC, SentID, sep = "_"))
corpus
class(corpus)
corpus
corpus <- quanteda::corpus(corpus)
class(corpus)
corpus
docvars(corpus)
names(docvars(corpus))
docvars(corpus)
unique(docvars(corpus)$PMC)
length(unique(docvars(corpus)$PMC))
corp_first <- corpus_subset(corpus, PMC = "PMC2267737")
corp_first
docvars(corpus)
corpus
#length(unique(docvars(corpus)$PMC)) #check
summary(corpus)
head(docvars(corpus))
head(summary(corpus))
corpus["PMC2267737_D00004"]]
corpus["PMC2267737_D00004"]
corpus[[1]]
docvars(corpus[1])
ndoc(corpus)
?corpus_subset
#only 1st PMC for analysis
corp_first <- corpus_subset(corpus, PMC == "PMC2267737")
corp_first
head(summary(corp_first))
?kwic
?index
met_vec
lay1 <- kwic(corp_first, pattern = met_vec)
tok_first <- tokens(corp_first)
###1st layer --> EXACT MATCHING
lay1 <- kwic(tok_first, pattern = met_vec)
tok_first
###1st layer --> EXACT MATCHING
lay1 <- index(tok_first, pattern = met_vec)
corp_first
tok_first <- tokens(corp_first, split_hyphens = FALSE, include_docvars = TRUE)
tok_first
###1st layer --> EXACT MATCHING
lay1 <- index(tok_first, pattern = met_vec)
?tokens_lookup
############DICT############
dictionary(met_vec)
############DICT############
dictionary(list(met_vec))
############DICT############
dictionary(as.dictionary(met_vec))
as.dictionary(dict_met)
met_vec
###1st layer --> EXACT MATCHING
lay1 <- index(tok_first, pattern = met_vec)
View(dict_met)
kwic(tok_first, pattern = "carnitine")
index(tok_first, pattern = "carnitine")
index(tok_first, pattern = "glucose")
tokens_lookup(corp_first)
index(tok_first, pattern = dict_met$alias)
index(tok_first, pattern = dict_met[!(is.na(dict_met$alias))]
)
index(tok_first, pattern = dict_met[!(is.na(dict_met$alias)),])
met_vec$alias
dict_met$alias
!is.na(dict_met$alias)
?na
unlist(dict_met$alias)
new_list=dict_met$alias[-which(is.null(dict_met$alias))]
new_list
new_list=dict_met$alias[-which(is.null(dict_met$alias)),]
which(is.null(dict_met$alias))
dict_met$alias
new_list=dict_met$alias[-which(is.na(dict_met$alias))]
new()
new_list
###1st layer --> EXACT MATCHING
lay1 <- index(tok_first, pattern = new_list)
lay1
new_list=dict_met$Synonyms[-which(is.na(dict_met$Synonyms))]
###1st layer --> EXACT MATCHING
lay1 <- index(tok_first, pattern = new_list)
###1st layer --> EXACT MATCHING
lay1 <- index(tok_first, pattern = new_list, valuetype = "glob")
tok_first <- tokens(corp_first, split_hyphens = FALSE, include_docvars = TRUE, what = "word")
###1st layer --> EXACT MATCHING
lay1 <- index(tok_first, pattern = new_list, valuetype = "glob")
tok_first <- tokens(corp_first, split_hyphens = FALSE, include_docvars = TRUE, remove_symbols = TRUE, what = "word")
###1st layer --> EXACT MATCHING
lay1 <- index(tok_first, pattern = new_list, valuetype = "glob")
tok_first <- tokens(corp_first, split_hyphens = FALSE, include_docvars = TRUE, remove_symbols = TRUE, remove_punct = TRUE, what = "word")
###1st layer --> EXACT MATCHING
lay1 <- index(tok_first, pattern = new_list, valuetype = "glob")
is.regex
tok_first <- tokens(corp_first, split_hyphens = FALSE, include_docvars = TRUE, remove_symbols = FALSE, remove_punct = FALSE, what = "fastestword")
tok_first
View(tok_first)
new_list=dict_met$name[-which(is.na(dict_met$name))]
lay1 <- index(tok_first, pattern = new_list, valuetype = "glob")
lay1 <- index(tok_first, pattern = new_list)
tok_first <- tokens(corp_first, split_hyphens = FALSE, include_docvars = TRUE)
###1st layer --> EXACT MATCHING
new_list=dict_met$name[-which(is.na(dict_met$name))]
lay1 <- index(tok_first, pattern = new_list)
new_list
dict_met$name
which(is.na(dict_met$name))
lay1 <- index(tok_first, pattern = dict_met$name)
lay1 <- index(tok_first, pattern = dict_met$name, valuetype = "fixed")
View(lay1)
corpus[1]
corpus[[1]]
index(corpus[[1]], "creatinine")
index(tokens(corpus[[1]]), "creatinine")
tok_first <- tokens(corp_first, split_hyphens = FALSE, include_docvars = TRUE, what = "character")
lay1 <- index(tok_first, pattern = dict_met$name, valuetype = "fixed")
lay1
?kwic
kwic(tok_first, pattern = "carnitine")
kwic(tok_first, pattern = "creatinine")
kwic(corp_first, pattern = "creatinine")
tok_first <- tokens(corp_first, split_hyphens = FALSE, include_docvars = TRUE)
lay1 <- index(tok_first, pattern = dict_met$name, valuetype = "fixed")
kwic(corp_first, pattern = "creatinine", index = lay1)
match_lay_1 <- match_lay_1 %>%
str_locate(content(corpus), term )
?str_count
corp_first
tok_first
lay1 <- index(tok_first, pattern = dict_met$name, valuetype = "fixed")
lay1
lapply(str_locate(corpus[docname == lay1$docname], pattern = lay1$pattern))
lapply(lay1, str_locate(corpus[docname == lay1$docname], pattern = lay1$pattern))
lapply(lay1, print(lay1$pattern))
lapply(lay1, print())
lapply(lay1, print(pattern))
lapply(lay1, row_number)
?lapply
lapply(lay1, 1, str_locate(corpus[docname == lay1$docname], pattern = lay1$pattern))
apply(lay1, 1, str_locate(corpus[docname == lay1$docname], pattern = lay1$pattern))
apply(lay1, MARGIN = 1, FUN = str_locate(corpus[docname == lay1$docname], pattern = lay1$pattern))
apply(lay1, MARGIN = 1, FUN = print(pattern)))
apply(lay1, MARGIN = 1, FUN = print(pattern))
apply(lay1, MARGIN = 1, FUN = print(lay1$pattern))
apply(lay1, MARGIN = 1, FUN = sum(lay1$from, lay1$to))
apply(lay1, MARGIN = 1, f)
f <- sum(lay1$from, lay1$to)
apply(lay1, MARGIN = 1, f)
sum(x$from, x$to)
f <- function(x){
sum(x$from, x$to)
}
apply(lay1, MARGIN = 1, f)
sum(from, to)
sum(x[2], x[3])
f <- function(x){
sum(x[2], x[3])
}
apply(lay1, MARGIN = 1, f)
sum(int(x[2]), int(x[3]))
f <- function(x){
sum(int(x[2]), int(x[3]))
}
apply(lay1, MARGIN = 1, f)
f <- function(x){
sum(integer(x[2]), integer(x[3]))
}
apply(lay1, MARGIN = 1, f)
integer(x[2]) + integer(x[3])
f <- function(x){
integer(x[2]) + integer(x[3])
}
apply(lay1, MARGIN = 1, f)
str_locate(lay1[[1]], "creatinine")
str_locate(corpus[[1]], "creatinine")
str_locate(corpus[[1]], "glucose")
str_locate(corpus[[2]], "triglycerides")
corpus[[2]]
str_locate_all(corpus[[2]], "triglycerides")
str_locate_all(corpus[[1]], pattern = )
corpus[[1]]
str_locate_all(corpus[1], pattern = )
corpus[1]
corp_first
str_locate_all(corp_first, pattern = "creatinine")
flatten(str_locate_all(corp_first, pattern = "creatinine"))
?flatten
library(rlang)
flatten(str_locate_all(corp_first, pattern = "creatinine"))
squash(str_locate_all(corp_first, pattern = "creatinine"))
str_locate_all(corp_first, pattern = "creatinine"))
str_locate_all(corp_first, pattern = "creatinine")
str_locate_all(corp_first[1], pattern = "creatinine")
str_locate_all(corp_first[[1]], pattern = "creatinine")
m< - str_locate_all(corp_first[[1]], pattern = "creatinine")
m <- str_locate_all(corp_first[[1]], pattern = "creatinine")
m
class(m)
unlist(m)
m <- str_locate_all(corp_first[[1]], pattern = lay1$pattern)
lay1
lay1 %>%
group_by(docname) %>%
mutate(from = str_locate(pattern))
lay1 %>%
group_by(docname) %>%
ç
lay1 <- lay1 %>%
group_by(docname)
lay1[1]
lay1[1,]
unique(lay1$pattern)
terms <- unique(lay1$pattern)
str_locate(corp_first, terms)
apply(corp_first, str_locate(pattern =  terms))
lapply(corp_first, FUN = str_locate(pattern =  terms))
print(lay1[1])
print(lay1$docname)
print(row)
for (row in lay1) {
print(row)
}
print(lay1[row])
for (row in lay1) {
print(row)
}
ungroup
ungroup(lay1)
for (row in lay1) {
print(row)
}
f <- function(x){
print(x$docname)
}
apply(lay1, MARGIN = 1, f)
print(x[docname])
class(lay1)
apply(lay1,  f)
lay1
str_locate_all(corp_first, pattern = "creatinine")
str_locate(corp_first, pattern = "creatinine")
corp_first
corpus
str_locate(corp_first[[doc]],dict_met$name )
for (doc in corp_first){
str_locate(corp_first[doc],dict_met$name )
}
for (doc in corp_first){
str_locate(corp_first[[doc]],dict_met$name )
}
corp_first[[1]]
length(corp_first))
length(corp_first)
1:length(corp_first)
for (doc in 1:length(corp_first)){
str_locate(corp_first[[doc]],dict_met$name )
}
str_locate_fixed(corp_first[[doc]],dict_met$name )
?str_locate
str_locate_fixed(corp_first[[doc]],fixed(dict_met$name))
str_locate(corp_first[[doc]],fixed(dict_met$name))
str_locate(corp_first[[1]],fixed(dict_met$name))
stri_locate_all_fixed(corp_first[[doc]], dict_met$name)
stri_locate_all_fixed(corp_first[[doc]], dict_met$name, omit_no_match = TRUE)
stri_locate_all_fixed(corpus[[1]], "creatinine")
stri_locate_all_fixed(corpus[[1]], c("creatinine", "glucose", "urea"))
stri_locate_all_fixed(corpus, c("creatinine", "glucose", "urea"))
stri_locate_all_fixed(corp_first, c("creatinine", "glucose", "urea"))
stri_locate_all_fixed(corp_first, c("creatinine", "glucose", "urea") , get_length = TRUE, omit_no_match = TRUE)
unlist(stri_locate_all_fixed(corp_first, c("creatinine", "glucose", "urea") , get_length = TRUE, omit_no_match = TRUE))
m <- stri_locate_all_fixed(corp_first, c("creatinine", "glucose", "urea") , get_length = TRUE, omit_no_match = TRUE)
names(m) <- names(corp_first)
m
print(as.data.frame(do.call(rbind, m)))
tibble(do.call(rbind, m))
?as.data.frame
print(as.data.frame(do.call(rbind, m), row.names = names(m)))
names(m)
m <- do.call(rbind, m)
print(as.data.frame(m, row.names = names(m)))
tibble(m)
names(m)
m <- stri_locate_all_fixed(corp_first, c("creatinine", "glucose", "urea") , get_length = TRUE, omit_no_match = TRUE)
m
names(m) <- names(corp_first)
m <- stri_locate_all_fixed(corp_first, c("creatinine", "glucose", "urea") , get_length = TRUE, omit_no_match = TRUE)
m
names(m) <- names(corp_first)
m
which(!(is.null(m)))
flatten(m)
m <- do.call(rbind, m)
m
?rbind
?do.call
m <- stri_locate_all_fixed(corp_first, c("creatinine", "glucose", "urea") , get_length = TRUE, omit_no_match = TRUE)
names(m) <- names(corp_first)
View(m)
m <- do.call(rbind, m, use.names = TRUE)
m <- stri_locate_all_fixed(corp_first, c("creatinine", "glucose", "urea") , get_length = TRUE, omit_no_match = TRUE)
names(m) <- names(corp_first)
m <- do.call(rbind, m, use.names = "check")
m <- do.call(rbind, m, args = idcol)
m <- do.call(rbind, m, args = list(idcol = TRUE))
m <- do.call(rbind, m, args = list(idcol = TRUE, use.names = TRUE))
m <- stri_locate_all_fixed(corp_first, c("creatinine", "glucose", "urea") , get_length = TRUE, omit_no_match = TRUE)
names(m) <- names(corp_first)
m <- do.call(rbind, m, args = list(idcol = TRUE, use.names = TRUE))
m <- do.call(rbind, m, args = list(use.names = TRUE))
m <- do.call(rbind, m, args = c(use.names = TRUE))
m <- do.call(rbind, m, c(use.names = TRUE))
m <- do.call(rbind, m, c(use.names = TRUE, idcol = TRUE))
m
m <- stri_locate_all_fixed(corp_first, c("creatinine", "glucose", "urea") , get_length = TRUE, omit_no_match = TRUE)
names(m) <- names(corp_first)
m <- do.call(rbind, m, c(use.names = TRUE, idcol = TRUE))
m
m <- stri_locate_all_fixed(corp_first, c("creatinine", "glucose", "urea") , get_length = TRUE, omit_no_match = TRUE)
names(m) <- names(corp_first)
rbind(m, use.names = TRUE)
rbind(m, doc = names(m))
tibble(rbind(m, doc = names(m)))
(rbind(m, doc = names(m))ç
names(m) <- names(corp_first)
m
class(m)
m <- stri_locate_all_fixed(corp_first, c("creatinine", "glucose", "urea") ,capture_groups = TRUE, omit_no_match = TRUE)
?stri_opts_fixed
m <- stri_locate_all_fixed(corp_first, c("creatinine", "glucose", "urea"))
m <- stri_locate_all_fixed(corp_first, pattern = c("creatinine", "glucose", "urea") , capture_groups = TRUE, omit_no_match = TRUE)
m <- stri_locate_all_fixed(corp_first, pattern = c("creatinine", "glucose", "urea") , capture_groups = TRUE, omit_no_match = TRUE)
names(m) <- names(corp_first)
m
class(m[1])
class(m[[1]])
lapply(m, cbind(m, names(m))
)
m %>%
mutate(doc = names(m))
m <- do.call(rbind, m, c(use.names = TRUE, idcol = TRUE))
m
m
m <- stri_locate_all_fixed(corp_first, pattern = c("creatinine", "glucose", "urea") , capture_groups = TRUE, omit_no_match = TRUE)
m
rbind(m, names(m))
lapply(rbind(m, names(m)))
lapply(m, rbind(m, names(m)))
?lapply
lapply(m, cbind, namesm)
lapply(m, cbind, names(m))
m
